// Code generated by MockGen. DO NOT EDIT.
// Source: user_repository.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	reflect "reflect"

	model "github.com/gecoronel/donde-estan-ws/internal/bussiness/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteObservedUserInObserverUser mocks base method.
func (m *MockUserRepository) DeleteObservedUserInObserverUser(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObservedUserInObserverUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObservedUserInObserverUser indicates an expected call of DeleteObservedUserInObserverUser.
func (mr *MockUserRepositoryMockRecorder) DeleteObservedUserInObserverUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObservedUserInObserverUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteObservedUserInObserverUser), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), arg0)
}

// FindByUsername mocks base method.
func (m *MockUserRepository) FindByUsername(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserRepositoryMockRecorder) FindByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByUsername), arg0)
}

// FindObservedUserByPrivacyKey mocks base method.
func (m *MockUserRepository) FindObservedUserByPrivacyKey(arg0 string) (*model.ObservedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindObservedUserByPrivacyKey", arg0)
	ret0, _ := ret[0].(*model.ObservedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindObservedUserByPrivacyKey indicates an expected call of FindObservedUserByPrivacyKey.
func (mr *MockUserRepositoryMockRecorder) FindObservedUserByPrivacyKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindObservedUserByPrivacyKey", reflect.TypeOf((*MockUserRepository)(nil).FindObservedUserByPrivacyKey), arg0)
}

// Get mocks base method.
func (m *MockUserRepository) Get(arg0 uint64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), arg0)
}

// GetObservedUser mocks base method.
func (m *MockUserRepository) GetObservedUser(arg0 uint64) (*model.ObservedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObservedUser", arg0)
	ret0, _ := ret[0].(*model.ObservedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObservedUser indicates an expected call of GetObservedUser.
func (mr *MockUserRepositoryMockRecorder) GetObservedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObservedUser", reflect.TypeOf((*MockUserRepository)(nil).GetObservedUser), arg0)
}

// GetObserverUser mocks base method.
func (m *MockUserRepository) GetObserverUser(arg0 uint64) (*model.ObserverUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObserverUser", arg0)
	ret0, _ := ret[0].(*model.ObserverUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObserverUser indicates an expected call of GetObserverUser.
func (mr *MockUserRepositoryMockRecorder) GetObserverUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObserverUser", reflect.TypeOf((*MockUserRepository)(nil).GetObserverUser), arg0)
}

// GetUsers mocks base method.
func (m *MockUserRepository) GetUsers(arg0, arg1 string) (*[]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*[]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserRepositoryMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserRepository)(nil).GetUsers), arg0, arg1)
}

// SaveObservedUser mocks base method.
func (m *MockUserRepository) SaveObservedUser(arg0 model.ObservedUser) (*model.ObservedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObservedUser", arg0)
	ret0, _ := ret[0].(*model.ObservedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObservedUser indicates an expected call of SaveObservedUser.
func (mr *MockUserRepositoryMockRecorder) SaveObservedUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObservedUser", reflect.TypeOf((*MockUserRepository)(nil).SaveObservedUser), arg0)
}

// SaveObservedUserInObserverUser mocks base method.
func (m *MockUserRepository) SaveObservedUserInObserverUser(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObservedUserInObserverUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveObservedUserInObserverUser indicates an expected call of SaveObservedUserInObserverUser.
func (mr *MockUserRepositoryMockRecorder) SaveObservedUserInObserverUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObservedUserInObserverUser", reflect.TypeOf((*MockUserRepository)(nil).SaveObservedUserInObserverUser), arg0, arg1)
}

// SaveObserverUser mocks base method.
func (m *MockUserRepository) SaveObserverUser(arg0 model.ObserverUser) (*model.ObserverUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObserverUser", arg0)
	ret0, _ := ret[0].(*model.ObserverUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveObserverUser indicates an expected call of SaveObserverUser.
func (mr *MockUserRepositoryMockRecorder) SaveObserverUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObserverUser", reflect.TypeOf((*MockUserRepository)(nil).SaveObserverUser), arg0)
}
