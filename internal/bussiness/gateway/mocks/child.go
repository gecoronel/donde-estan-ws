// Code generated by MockGen. DO NOT EDIT.
// Source: child_repository.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	reflect "reflect"

	model "github.com/gecoronel/donde-estan-ws/internal/bussiness/model"
	gomock "github.com/golang/mock/gomock"
)

// MockChildRepository is a mock of ChildRepository interface.
type MockChildRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChildRepositoryMockRecorder
}

// MockChildRepositoryMockRecorder is the mock recorder for MockChildRepository.
type MockChildRepositoryMockRecorder struct {
	mock *MockChildRepository
}

// NewMockChildRepository creates a new mock instance.
func NewMockChildRepository(ctrl *gomock.Controller) *MockChildRepository {
	mock := &MockChildRepository{ctrl: ctrl}
	mock.recorder = &MockChildRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChildRepository) EXPECT() *MockChildRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockChildRepository) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChildRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChildRepository)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockChildRepository) Get(arg0 uint64) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChildRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChildRepository)(nil).Get), arg0)
}

// Save mocks base method.
func (m *MockChildRepository) Save(arg0 model.Child) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockChildRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChildRepository)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockChildRepository) Update(arg0 model.Child) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockChildRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChildRepository)(nil).Update), arg0)
}
