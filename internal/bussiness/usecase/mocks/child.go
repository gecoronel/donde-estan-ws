// Code generated by MockGen. DO NOT EDIT.
// Source: child.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gateway "github.com/gecoronel/donde-estan-ws/internal/bussiness/gateway"
	model "github.com/gecoronel/donde-estan-ws/internal/bussiness/model"
	gomock "github.com/golang/mock/gomock"
)

// MockChildUseCase is a mock of ChildUseCase interface.
type MockChildUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChildUseCaseMockRecorder
}

// MockChildUseCaseMockRecorder is the mock recorder for MockChildUseCase.
type MockChildUseCaseMockRecorder struct {
	mock *MockChildUseCase
}

// NewMockChildUseCase creates a new mock instance.
func NewMockChildUseCase(ctrl *gomock.Controller) *MockChildUseCase {
	mock := &MockChildUseCase{ctrl: ctrl}
	mock.recorder = &MockChildUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChildUseCase) EXPECT() *MockChildUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockChildUseCase) Delete(arg0 uint64, arg1 gateway.ServiceLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockChildUseCaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockChildUseCase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockChildUseCase) Get(arg0 uint64, arg1 gateway.ServiceLocator) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChildUseCaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChildUseCase)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockChildUseCase) Save(arg0 model.Child, arg1 gateway.ServiceLocator) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockChildUseCaseMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChildUseCase)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockChildUseCase) Update(arg0 model.Child, arg1 gateway.ServiceLocator) (*model.Child, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Child)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockChildUseCaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChildUseCase)(nil).Update), arg0, arg1)
}
