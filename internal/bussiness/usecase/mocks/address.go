// Code generated by MockGen. DO NOT EDIT.
// Source: address.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gateway "github.com/gecoronel/donde-estan-ws/internal/bussiness/gateway"
	model "github.com/gecoronel/donde-estan-ws/internal/bussiness/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAddressUseCase is a mock of AddressUseCase interface.
type MockAddressUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAddressUseCaseMockRecorder
}

// MockAddressUseCaseMockRecorder is the mock recorder for MockAddressUseCase.
type MockAddressUseCaseMockRecorder struct {
	mock *MockAddressUseCase
}

// NewMockAddressUseCase creates a new mock instance.
func NewMockAddressUseCase(ctrl *gomock.Controller) *MockAddressUseCase {
	mock := &MockAddressUseCase{ctrl: ctrl}
	mock.recorder = &MockAddressUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressUseCase) EXPECT() *MockAddressUseCaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAddressUseCase) Delete(arg0 uint64, arg1 gateway.ServiceLocator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressUseCaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressUseCase)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockAddressUseCase) Get(arg0 uint64, arg1 gateway.ServiceLocator) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAddressUseCaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddressUseCase)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockAddressUseCase) Save(arg0 model.Address, arg1 gateway.ServiceLocator) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockAddressUseCaseMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAddressUseCase)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockAddressUseCase) Update(arg0 model.Address, arg1 gateway.ServiceLocator) (*model.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*model.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAddressUseCaseMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressUseCase)(nil).Update), arg0, arg1)
}
